{"version":3,"sources":["components/Pokemon.js","App.js","serviceWorker.js","index.js"],"names":["Container","styled","div","PokemonIcon","img","PokemonName","h2","Pokemon","props","src","id","alt","onClick","window","open","name","Heading","h1","PkmContainer","App","searchInputHandler","event","setState","searchInput","target","value","state","pokemon","console","log","fetch","then","res","json","data","results","filteredPokemon","this","filter","element","includes","toLowerCase","className","placeholder","onChange","length","map","pkmId","indexOf","key","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"m4BAIA,IAAMA,EAAYC,IAAOC,IAAV,KAWTC,EAAcF,IAAOG,IAAV,KAMXC,EAAcJ,IAAOK,GAAV,KA6BFC,EAxBC,SAACC,GAMb,OACG,kBAACR,EAAD,KAEK,kBAACG,EAAD,CACIM,IAAG,mFACCD,EAAME,GADP,QAGHC,IAAI,WACJC,QAZQ,WAChBC,OAAOC,KAAP,kDAAuDN,EAAMO,KAA7D,uBAaI,kBAACV,EAAD,KACKG,EAAMO,Q,2TCtCvB,IAAMC,EAAUf,IAAOgB,GAAV,KAKPC,EAAejB,IAAOC,IAAV,KA+EHiB,E,YArEb,WAAYX,GAAO,IAAD,8BAChB,4CAAMA,KAsBRY,mBAAqB,SAAAC,GACnB,EAAKC,SAAS,CACZC,YAAaF,EAAMG,OAAOC,SAtB5B,EAAKC,MAAQ,CACXC,QAAS,GACTJ,YAAa,IAEfK,QAAQC,IAAI,oCAPI,E,iFAUE,IAAD,OACjBD,QAAQC,IAAI,0CACZC,MAAM,gDACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAAAG,GACE,EAAKZ,SAAS,CACZK,QAASO,EAAKC,e,+BAYb,IAAD,OACNP,QAAQC,IAAI,+BAEZ,IAAIO,EAAkBC,KAAKX,MAAMC,QAAQW,QAAO,SAAAC,GAC9C,OAAOA,EAAQxB,KAAKyB,SAAS,EAAKd,MAAMH,YAAYkB,kBAKtD,OAFAb,QAAQC,IAAIO,GAGV,yBAAKM,UAAU,OACb,kBAAC1B,EAAD,sBAEA,2BACE2B,YAAY,OACZC,SAAUP,KAAKjB,qBAGjB,kBAACF,EAAD,KAEGkB,EAAgBS,OAAS,EACxBT,EAAgBU,KAAI,SAAAP,GAClB,IAAIQ,EAAQ,EAAKrB,MAAMC,QAAQqB,QAAQT,GAAW,EAClD,OACE,kBAAC,EAAD,CACExB,KAAMwB,EAAQxB,KACdL,GAAIqC,EACJE,IAAKF,OAIX,kD,GA7DMG,aCPEC,QACW,cAA7BtC,OAAOuC,SAASC,UAEe,UAA7BxC,OAAOuC,SAASC,UAEhBxC,OAAOuC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrC,QAAQqC,MAAMA,EAAMC,c","file":"static/js/main.95a1690a.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\n\nconst Container = styled.div`\n    width: 150px;\n    height: 150px;\n    border-radius: 20px;\n    margin: 5px 10px 5px 10px;\n    background-color: #A9A9A9;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    align-items: center;\n`\nconst PokemonIcon = styled.img`\n    cursor: pointer;\n    width: 100px;\n    height: 100px;\n`\n\nconst PokemonName = styled.h2`\n    font-family: \"pokemon-font\", monospace;\n    font-size: 18px;\n`\n\nconst Pokemon = (props) => {\n\n    const imgUrlClick = () => {\n        window.open(`https://bulbapedia.bulbagarden.net/wiki/${props.name}_(Pok%C3%A9mon)`)\n    }\n\n    return (\n       <Container>\n           {/* <p>#{props.id}</p> */}\n            <PokemonIcon \n                src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${\n                    props.id\n                    }.png`}\n                alt=\"pkm-icon\"\n                onClick={imgUrlClick}\n                />\n            <PokemonName>\n                {props.name}\n            </PokemonName>\n       </Container>\n        \n    )\n}\n\nexport default Pokemon;","import React, { Component } from 'react';\nimport Pokemon from './components/Pokemon.js';\nimport styled from 'styled-components';\nimport './App.css';\n\nconst Heading = styled.h1`\n  font-family: \"pokemon-font\", monospace;\n  font-size: 42px;\n`\n\nconst PkmContainer = styled.div`\n  width: 90%;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  margin-top: 20px;\n\n`\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n\n    this.state = {\n      pokemon: [],\n      searchInput: \"\"\n    }\n    console.log(\"[App.js] Logged in constructor()\");\n  }\n\n  componentDidMount(){\n    console.log(\"[App.js] Logged in componentDidMount()\");\n    fetch(\"https://pokeapi.co/api/v2/pokemon/?limit=151\")\n    .then(res => res.json())\n    .then(\n      data => {\n        this.setState({\n          pokemon: data.results\n        })\n      }\n    )\n  }\n\n  searchInputHandler = event => {\n    this.setState({\n      searchInput: event.target.value\n    })\n  }\n\n  render(){\n    console.log(\"[App.js] Logged in render()\");\n\n    let filteredPokemon = this.state.pokemon.filter(element => {\n      return element.name.includes(this.state.searchInput.toLowerCase())\n    })\n\n    console.log(filteredPokemon)\n\n    return (\n      <div className=\"App\">\n        <Heading>Kanto Pokedex</Heading>\n\n        <input\n          placeholder=\"Name\"\n          onChange={this.searchInputHandler}\n        />\n\n        <PkmContainer>\n\n          {filteredPokemon.length > 0 ?  \n            filteredPokemon.map(element => {\n              let pkmId = this.state.pokemon.indexOf(element) + 1;\n              return(\n                <Pokemon \n                  name={element.name}\n                  id={pkmId}\n                  key={pkmId}/>\n              )\n            })\n            :\n            <p>No Results :(</p>\n          }\n        </PkmContainer>\n        \n      </div>\n    )\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}